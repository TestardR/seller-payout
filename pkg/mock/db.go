// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/TestardR/seller-payout/internal/domain"
	db "github.com/TestardR/seller-payout/pkg/db"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDB) Begin() (db.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(db.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// Commit mocks base method.
func (m *MockDB) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDBMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDB)(nil).Commit))
}

// FindAll mocks base method.
func (m *MockDB) FindAll(dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDBMockRecorder) FindAll(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDB)(nil).FindAll), dest)
}

// FindAllWhere mocks base method.
func (m *MockDB) FindAllWhere(dest interface{}, conds map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWhere", dest, conds)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAllWhere indicates an expected call of FindAllWhere.
func (mr *MockDBMockRecorder) FindAllWhere(dest, conds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWhere", reflect.TypeOf((*MockDB)(nil).FindAllWhere), dest, conds)
}

// FindByID mocks base method.
func (m *MockDB) FindByID(dest interface{}, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", dest, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID.
func (mr *MockDBMockRecorder) FindByID(dest, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockDB)(nil).FindByID), dest, id)
}

// FindPayoutsBySellerID mocks base method.
func (m *MockDB) FindPayoutsBySellerID(arg0 string) ([]domain.Payout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayoutsBySellerID", arg0)
	ret0, _ := ret[0].([]domain.Payout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayoutsBySellerID indicates an expected call of FindPayoutsBySellerID.
func (mr *MockDBMockRecorder) FindPayoutsBySellerID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayoutsBySellerID", reflect.TypeOf((*MockDB)(nil).FindPayoutsBySellerID), arg0)
}

// FindSellersWhereItems mocks base method.
func (m *MockDB) FindSellersWhereItems(conds map[string]interface{}) ([]domain.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSellersWhereItems", conds)
	ret0, _ := ret[0].([]domain.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSellersWhereItems indicates an expected call of FindSellersWhereItems.
func (mr *MockDBMockRecorder) FindSellersWhereItems(conds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSellersWhereItems", reflect.TypeOf((*MockDB)(nil).FindSellersWhereItems), conds)
}

// FindUnpaidOutItems mocks base method.
func (m *MockDB) FindUnpaidOutItems() ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnpaidOutItems")
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnpaidOutItems indicates an expected call of FindUnpaidOutItems.
func (mr *MockDBMockRecorder) FindUnpaidOutItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnpaidOutItems", reflect.TypeOf((*MockDB)(nil).FindUnpaidOutItems))
}

// FindUnpaidOutItemsBySellerID mocks base method.
func (m *MockDB) FindUnpaidOutItemsBySellerID(arg0 string) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnpaidOutItemsBySellerID", arg0)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnpaidOutItemsBySellerID indicates an expected call of FindUnpaidOutItemsBySellerID.
func (mr *MockDBMockRecorder) FindUnpaidOutItemsBySellerID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnpaidOutItemsBySellerID", reflect.TypeOf((*MockDB)(nil).FindUnpaidOutItemsBySellerID), arg0)
}

// Health mocks base method.
func (m *MockDB) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockDBMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDB)(nil).Health))
}

// Insert mocks base method.
func (m *MockDB) Insert(dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDBMockRecorder) Insert(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDB)(nil).Insert), dest)
}

// Rollback mocks base method.
func (m *MockDB) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDBMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDB)(nil).Rollback))
}

// RunMigrations mocks base method.
func (m *MockDB) RunMigrations(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunMigrations", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMigrations indicates an expected call of RunMigrations.
func (mr *MockDBMockRecorder) RunMigrations(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMigrations", reflect.TypeOf((*MockDB)(nil).RunMigrations), path)
}

// Update mocks base method.
func (m *MockDB) Update(dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDBMockRecorder) Update(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDB)(nil).Update), dest)
}
